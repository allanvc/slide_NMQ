MAPE <- matrix(0, p.max+1, q.max+1)
for (p in 0:p.max){
for (q in 0:q.max){
previsto <- NULL
observado <- NULL
for (t in 0:11){
X <- X.0[1:(N-12+t)]
n <- length(X)
# fit  <- arima(X, order=c(p, 1, q),xreg=1:n) #Certo
fit  <- arima(X, order=c(p, 0, q),xreg=1:n) #Certo
prev <- predict(fit, n.ahead = 1, newxreg=(n+1))
obs  <- X.0[N-12+t+1]
previsto[t+1] <- prev$pred
observado[t+1] <- obs
}
MAPE[(p+1),(q+1)] <- 100*(mean(abs((previsto-observado)/observado)))
}
}
X.0
N
N <- length(nilo$volume)
X.0 <- nilo$volume # extrair somente os valores como vetor mesmo
N <- length(nilo$volume)
p.max = 5
q.max = 3
MAPE <- matrix(0, p.max+1, q.max+1)
for (p in 0:p.max){
for (q in 0:q.max){
previsto <- NULL
observado <- NULL
for (t in 0:11){
X <- X.0[1:(N-12+t)]
n <- length(X)
# fit  <- arima(X, order=c(p, 1, q),xreg=1:n) #Certo
fit  <- arima(X, order=c(p, 0, q),xreg=1:n) #Certo
prev <- predict(fit, n.ahead = 1, newxreg=(n+1))
obs  <- X.0[N-12+t+1]
previsto[t+1] <- prev$pred
observado[t+1] <- obs
}
MAPE[(p+1),(q+1)] <- 100*(mean(abs((previsto-observado)/observado)))
}
}
MAPE_nodiff_nilo <- MAPE
MAPE_nodiff_nilo
readr::write_tsv(as.data.frame(MAPE_nodiff_nilo), path="/home/allan/Documents/1S2018/A_SERIES_TEMPORAIS/PP2/dados/MAPE_nodiff_nilo.txt")
MAPE_nodiff_nilo <- readr::read_tsv("/home/allan/Documents/1S2018/A_SERIES_TEMPORAIS/PP2/dados/MAPE_nodiff_nilo.txt") %>%
magrittr::set_colnames(paste0("q=", 0:3)) %>%
as.data.frame() %>%
round(., 4) %>%
`rownames<-`(paste0("p=", 0:5))
MAPE_nodiff_nilo
library(kableExtra)
library(knitr)
library(kableExtra)
library(knitr)
MAPE_nodiff_nilo %>%
dplyr::mutate(
`q=0` = cell_spec(`q=0`,
background = ifelse(`q=0` == 4.3837, plotly_palette[3],
ifelse(`q=0` < 4.45 & `q=0` != 4.3837, plotly_palette[6], "white")),
color = dplyr::if_else(`q=0` < 4.45, "white", "black")),
`q=1` = cell_spec(`q=1`,
background = ifelse(`q=1` < 4.5, plotly_palette[6], "white"),
color = dplyr::if_else(`q=0` < 4.5, "white", "black")),
ordem = rownames(.),
ordem = cell_spec(ordem, color = "black")) %>%
dplyr::select(ordem, paste0("q=", 0:3)) %>%
kable(format="html", escape=F, digits = 4, caption="grid NOAA") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = F) #%>%
library(kableExtra)
library(knitr)
MAPE_nodiff_nilo %>%
dplyr::mutate(
`q=0` = cell_spec(`q=0`,
background = ifelse(`q=0` == 4.3837, plotly_palette[3],
ifelse(`q=0` < 4.45 & `q=0` != 4.3837, plotly_palette[6], "white")),
color = dplyr::if_else(`q=0` < 4.45, "white", "black")),
`q=1` = cell_spec(`q=1`,
background = ifelse(`q=1` < 4.5, plotly_palette[6], "white"),
color = dplyr::if_else(`q=1` < 4.5, "white", "black")),
ordem = rownames(.),
ordem = cell_spec(ordem, color = "black")) %>%
dplyr::select(ordem, paste0("q=", 0:3)) %>%
kable(format="html", escape=F, digits = 4, caption="grid NOAA") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = F) #%>%
MAPE_nodiff_nilo %>%
dplyr::mutate(
`q=0` = cell_spec(`q=0`,
background = ifelse(`q=0` == 4.3837, plotly_palette[3],
ifelse(`q=0` < 4.45 & `q=0` != 4.3837, plotly_palette[6], "white")),
color = dplyr::if_else(`q=0` < 4.45, "white", "black")),
`q=1` = cell_spec(`q=1`,
background = ifelse(`q=1` < 4.5, plotly_palette[6], "white"),
color = dplyr::if_else(`q=1` < 4.5, "white", "black")),
ordem = rownames(.),
ordem = cell_spec(ordem, color = "black")) %>%
dplyr::select(ordem, paste0("q=", 0:3)) %>%
kable(format="html", escape=F, digits = 4, caption="grid Nilo") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = F) #%>%
X.0 <- nilo$volume # extrair somente os valores como vetor mesmo
N <- length(nilo$volume)
p.max = 5
q.max = 3
MAPE <- matrix(0, p.max+1, q.max+1)
for (p in 0:p.max){
for (q in 0:q.max){
previsto <- NULL
observado <- NULL
for (t in 0:11){
X <- X.0[1:(N-12+t)]
n <- length(X)
fit  <- arima(X, order=c(p, 1, q),xreg=1:n) #Certo
# fit  <- arima(X, order=c(p, 0, q),xreg=1:n) #Certo
prev <- predict(fit, n.ahead = 1, newxreg=(n+1))
obs  <- X.0[N-12+t+1]
previsto[t+1] <- prev$pred
observado[t+1] <- obs
}
MAPE[(p+1),(q+1)] <- 100*(mean(abs((previsto-observado)/observado)))
}
}
MAPE_diff_nilo <- MAPE
MAPE_diff_nilo
readr::write_tsv(as.data.frame(MAPE_diff_nilo), path="/home/allan/Documents/1S2018/A_SERIES_TEMPORAIS/PP2/dados/MAPE_diff_nilo.txt")
MAPE_diff_nilo <- readr::read_tsv("/home/allan/Documents/1S2018/A_SERIES_TEMPORAIS/PP2/dados/MAPE_diff_nilo.txt") %>%
magrittr::set_colnames(paste0("q=", 0:3)) %>%
as.data.frame() %>%
round(., 4) %>%
`rownames<-`(paste0("p=", 0:5))
library(kableExtra)
library(knitr)
MAPE_diff_nilo %>%
dplyr::mutate(
`q=0` = cell_spec(`q=0`,
background = ifelse(`q=0` == 4.3837, plotly_palette[3],
ifelse(`q=0` < 4.45 & `q=0` != 4.3837, plotly_palette[6], "white")),
color = dplyr::if_else(`q=0` < 4.45, "white", "black")),
`q=1` = cell_spec(`q=1`,
background = ifelse(`q=1` < 4.5, plotly_palette[6], "white"),
color = dplyr::if_else(`q=1` < 4.5, "white", "black")),
ordem = rownames(.),
ordem = cell_spec(ordem, color = "black")) %>%
dplyr::select(ordem, paste0("q=", 0:3)) %>%
kable(format="html", escape=F, digits = 4, caption="grid Nilo") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = F) #%>%
X.0 <- nilo$volume # extrair somente os valores como vetor mesmo
N <- length(nilo$volume)
p.max = 7
q.max = 3
MAPE <- matrix(0, p.max+1, q.max+1)
for (p in 0:p.max){
for (q in 0:q.max){
previsto <- NULL
observado <- NULL
for (t in 0:11){
X <- X.0[1:(N-12+t)]
n <- length(X)
# fit  <- arima(X, order=c(p, 1, q),xreg=1:n) #Certo
fit  <- arima(X, order=c(p, 0, q),xreg=1:n) #Certo
prev <- predict(fit, n.ahead = 1, newxreg=(n+1))
obs  <- X.0[N-12+t+1]
previsto[t+1] <- prev$pred
observado[t+1] <- obs
}
MAPE[(p+1),(q+1)] <- 100*(mean(abs((previsto-observado)/observado)))
}
}
MAPE_nodiff_nilo <- MAPE
MAPE_nodiff_nilo
readr::write_tsv(as.data.frame(MAPE_nodiff_nilo), path="/home/allan/Documents/1S2018/A_SERIES_TEMPORAIS/PP2/dados/MAPE_nodiff_nilo.txt")
MAPE_nodiff_nilo <- readr::read_tsv("/home/allan/Documents/1S2018/A_SERIES_TEMPORAIS/PP2/dados/MAPE_nodiff_nilo.txt") %>%
magrittr::set_colnames(paste0("q=", 0:3)) %>%
as.data.frame() %>%
round(., 4) %>%
`rownames<-`(paste0("p=", 0:5))
MAPE_nodiff_nilo <- readr::read_tsv("/home/allan/Documents/1S2018/A_SERIES_TEMPORAIS/PP2/dados/MAPE_nodiff_nilo.txt") %>%
magrittr::set_colnames(paste0("q=", 0:3)) %>%
as.data.frame() %>%
round(., 4) %>%
`rownames<-`(paste0("p=", 0:7))
library(kableExtra)
library(knitr)
MAPE_nodiff_nilo %>%
dplyr::mutate(
`q=0` = cell_spec(`q=0`,
background = ifelse(`q=0` == 4.3837, plotly_palette[3],
ifelse(`q=0` < 4.45 & `q=0` != 4.3837, plotly_palette[6], "white")),
color = dplyr::if_else(`q=0` < 4.45, "white", "black")),
`q=1` = cell_spec(`q=1`,
background = ifelse(`q=1` < 4.5, plotly_palette[6], "white"),
color = dplyr::if_else(`q=1` < 4.5, "white", "black")),
ordem = rownames(.),
ordem = cell_spec(ordem, color = "black")) %>%
dplyr::select(ordem, paste0("q=", 0:3)) %>%
kable(format="html", escape=F, digits = 4, caption="grid Nilo") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = F) #%>%
X.0 <- nilo$volume # extrair somente os valores como vetor mesmo
N <- length(nilo$volume)
p.max = 7
q.max = 3
MAPE <- matrix(0, p.max+1, q.max+1)
for (p in 0:p.max){
for (q in 0:q.max){
previsto <- NULL
observado <- NULL
for (t in 0:11){
X <- X.0[1:(N-12+t)]
n <- length(X)
fit  <- arima(X, order=c(p, 1, q),xreg=1:n) #Certo
# fit  <- arima(X, order=c(p, 0, q),xreg=1:n) #Certo
prev <- predict(fit, n.ahead = 1, newxreg=(n+1))
obs  <- X.0[N-12+t+1]
previsto[t+1] <- prev$pred
observado[t+1] <- obs
}
MAPE[(p+1),(q+1)] <- 100*(mean(abs((previsto-observado)/observado)))
}
}
MAPE_diff_nilo <- MAPE
readr::write_tsv(as.data.frame(MAPE_diff_nilo), path="/home/allan/Documents/1S2018/A_SERIES_TEMPORAIS/PP2/dados/MAPE_diff_nilo.txt")
MAPE_diff_nilo <- readr::read_tsv("/home/allan/Documents/1S2018/A_SERIES_TEMPORAIS/PP2/dados/MAPE_diff_nilo.txt") %>%
magrittr::set_colnames(paste0("q=", 0:3)) %>%
as.data.frame() %>%
round(., 4) %>%
`rownames<-`(paste0("p=", 0:7))
MAPE_diff_nilo %>%
dplyr::mutate(
`q=0` = cell_spec(`q=0`,
background = ifelse(`q=0` == 4.3837, plotly_palette[3],
ifelse(`q=0` < 4.45 & `q=0` != 4.3837, plotly_palette[6], "white")),
color = dplyr::if_else(`q=0` < 4.45, "white", "black")),
`q=1` = cell_spec(`q=1`,
background = ifelse(`q=1` < 4.5, plotly_palette[6], "white"),
color = dplyr::if_else(`q=1` < 4.5, "white", "black")),
ordem = rownames(.),
ordem = cell_spec(ordem, color = "black")) %>%
dplyr::select(ordem, paste0("q=", 0:3)) %>%
kable(format="html", escape=F, digits = 4, caption="grid Nilo") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = F) #%>%
MAPE_diff_nilo %>%
dplyr::mutate(
`q=0` = cell_spec(`q=0`,
background = ifelse(`q=0` == 4.0483, plotly_palette[3],
ifelse(`q=0` < 4.45 & `q=0` != 4.3837, plotly_palette[6], "white")),
color = dplyr::if_else(`q=0` < 4.45, "white", "black")),
`q=1` = cell_spec(`q=1`,
background = ifelse(`q=1` < 4.5, plotly_palette[6], "white"),
color = dplyr::if_else(`q=1` < 4.5, "white", "black")),
ordem = rownames(.),
ordem = cell_spec(ordem, color = "black")) %>%
dplyr::select(ordem, paste0("q=", 0:3)) %>%
kable(format="html", escape=F, digits = 4, caption="grid Nilo") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = F) #%>%
MAPE_diff_nilo %>%
dplyr::mutate(
`q=0` = cell_spec(`q=0`,
background = ifelse(`q=0` == 4.0483, plotly_palette[3],
ifelse(`q=0` < 4.45 & `q=0` != 4.3837, plotly_palette[6], "white")),
color = dplyr::if_else(`q=0` < 4.45, "white", "black")),
`q=1` = cell_spec(`q=1`,
background = ifelse(`q=1` < 4.5, plotly_palette[6], "white"),
color = dplyr::if_else(`q=1` < 4.5, "white", "black")),
ordem = rownames(.),
ordem = cell_spec(ordem, color = "black")) %>%
dplyr::select(ordem, paste0("q=", 0:3)) %>%
kable(format="html", escape=F, digits = 4, caption="grid Nilo") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = F) #%>%
MAPE_diff_nilo %>%
dplyr::mutate(
`q=0` = cell_spec(`q=0`,
background = ifelse(`q=0` == 4.0483, plotly_palette[3],
ifelse(`q=0` < 4.45 & `q=0` != 4.3837, plotly_palette[6], "white")),
color = dplyr::if_else(`q=0` < 4.45, "white", "black")),
`q=1` = cell_spec(`q=1`,
background = ifelse(`q=1` < 4.5, plotly_palette[6], "white"),
color = dplyr::if_else(`q=1` < 4.5, "white", "black")),
ordem = rownames(.),
ordem = cell_spec(ordem, color = "black")) %>%
dplyr::select(ordem, paste0("q=", 0:3)) %>%
kable(format="html", escape=F, digits = 4, caption="grid Nilo - série diferenciada") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = F) #%>%
X.0 <- nilo_ts
X.0
N
N <- length(X.0)
N
X.0[1:(N-12+t)]
nilo_ts
X.0 <- nilo$volume # extrair somente os valores como vetor mesmo
N
N
X.0 <- nilo_ts
length(X.0)
X.0 <- nilo_ts
N
N <- length(X.0)
N-12+t
X.0 <- nilo_ts
N <- length(X.0)
previsto <- NULL
observado <- NULL
for (t in 0:11){
X <- X.0[1:(N-12+t)]
n <- length(X)
fit  <- arima(X, order=c(2, 1, 0),xreg=1:n)
prev <- predict(fit, n.ahead = 1, newxreg=(n+1))
obs  <- X.0[N-12+t+1]
previsto[t+1] <- prev$pred
observado[t+1] <- obs
}
hchart(as.ts(observado), name="observado") %>%
hc_add_series(as.ts(previsto), name="previsto") %>%
hc_colors(plotly_palette[c(6,4)]) %>%
hc_title(text = "Nível Máximo Nilo - Previsto vs Observado (últimas 12 obs) - Arima(2,1,0)",
margin = 20, align = "center",
style = list(color = "black", useHTML = TRUE))
X.0 <- nilo$volume # extrair somente os valores como vetor mesmo
N <- length(nilo$volume)
previsto <- NULL
observado <- NULL
for (t in 0:11){
X <- X.0[1:(N-12+t)]
n <- length(X)
fit  <- arima(X, order=c(2, 1, 0),xreg=1:n)
prev <- predict(fit, n.ahead = 1, newxreg=(n+1))
obs  <- X.0[N-12+t+1]
previsto[t+1] <- prev$pred
observado[t+1] <- obs
}
hchart(as.ts(observado), name="observado") %>%
hc_add_series(as.ts(previsto), name="previsto") %>%
hc_colors(plotly_palette[c(6,4)]) %>%
hc_title(text = "Nível Máximo Nilo - Previsto vs Observado (últimas 12 obs) - Arima(2,1,0)",
margin = 20, align = "center",
style = list(color = "black", useHTML = TRUE))
library(forecast)
library(astsa)
nilofit <- arima(nilo_ts, order=c(2,1,0)) # usaremos arima para facilitar o plot
nilofcast <- forecast(nilofit, h=5)
as.data.frame(nilofcast, rownames = TRUE)
## 1) Grafo, MST e links interessantes
wd.loc <- "/home/allan/Documents/1S2018/TCC2/scripts/fase_final/completo_com_MST_boruvka/"
setwd(wd.loc)
library(Rcpp)
library(RcppMLPACK)
sourceCpp("mst_mlpack_v4.cpp", verbose=TRUE)
sourceCpp("dist_matrix_OK.cpp", verbose=TRUE)
funs <- c('1-FUN_select_link_v6.R',
'2-FUN_cluster_assign_v10_novo.R',
'3-FUN_stat_calc_conn_ss_v6.R',
'4-FUN-MST_cluster_v1.R',
'5-FUN-CCC_sim_v1.R',
'6-FUN-K_det_v3.R',
'7-FUN-MST_cluster_solution.R',
'FUN-gen_data_v3.R')
sapply(funs, source)
# figura 10 nova - links interessantes
library(dplyr)
set.seed(1984)
n <- 15
c1 <- data_frame(x = rnorm(n,-0.2, sd=0.2), y = rnorm(n,-2,sd=0.2), c="c1")
c2 <- data_frame(x = rnorm(n,-1.1,sd=0.15), y = rnorm(n,-2,sd=0.3), c= "c2")
c3 <- data_frame(x=0.55, y=-2.4, c="c1")
d <- rbind(c1, c2, c3)
d <- as.data.frame(d)
# plot(c1, xlim=c(-2,1), ylim=c(-2.5,-1.5), cex=3)
# points(c2, pch=16, cex=3)
# points(c3[1], c3[2], cex=3)
# identify(d) # para idt quais eram os ptos
out <- mlpack_mst(as.matrix(d[,-3]))
from <- out[1,]
to <- out[2,]
intlink_from <- 22
intlink_to <- 4
nolink_from<-c(5, 18)
nolink_to<-c(31, 30)
# fig com ggplot2
# de matriz para dataframe:
df<-as.data.frame(d)
library(ggplot2)
# criar um ponto a mais nos vetores from e to para o ggplot não dar erro de comprimento
fromgg <- c(from, 1)
togg <- c(to,1)
nolink_fromgg <-c(5, 18, rep(1, nrow(d)-2)) # para completar e ggplot nao reclamar
nolink_togg <-c(31, 30, rep(1, nrow(d)-2))
from_tree <- c( c(17, 29, 28, 23, 24, 26, 25, 27, 19, 22, 30, 4, 8, 3, 8, 8, 14, 2, 11, 12, 10, 7, 9, 13, 15, 6, 1, 20, 18, 21), 1)
to_tree <- c( c(29, 28, 23, 24, 26, 25, 27, 19, 22, 30, 4, 8, 3, 5, 31, 14, 2, 11, 12, 10, 7, 9, 13, 15, 6, 1, 20, 18, 21, 16), 1)
# grafo
from_total <- rep(1:nrow(d), each= nrow(d))
to_total <- rep(1:nrow(d), nrow(d))
df_total <- df[rep(seq_len(nrow(df)), nrow(d)),]
plotly_palette <- c("#1F77B4", "#FF7F0E", "#2CA02C", "#D62728", "#9575D2", "#8C564B", "#E377C0", "#7F7F7F",
"#BCBD22", "#17BECF")
library(dplyr)
# b <- df_total %>%
# grafo total:
b <- ggplot()+
geom_point(data = df_total, aes(x, y, colour = factor(c), shape = factor(c)), size=3)+
geom_segment(aes(x = df_total[from_total,1], y = df_total[from_total,2],
xend = df_total[to_total,1], yend = df_total[to_total,2], colour = "grafo"),
data = df_total, linetype="dotted", size = 0.4, alpha = 0.4)+
# geom_point(aes(x, y, colour = factor(c), shape = factor(c)), size=3)+
# Spanning Tree qualquer:
geom_segment(aes(x = df[from_tree,1], y = df[from_tree,2],
xend = df[to_tree,1], yend = df[to_tree,2], colour="tree"),
data = df, linetype="dotted", size=1.2)+
# plotagem regular MST:
# geom_point(aes(df[,1], df[,2], colour = factor(c), shape = factor(c)))+
geom_segment(aes(x = df[fromgg,1], y = df[fromgg,2],
xend = df[togg,1], yend = df[togg,2], colour="MST"),
data = df, linetype="dotted", size=1.2)+
# outliers:
geom_segment(aes(x = df[nolink_fromgg,1], y = df[nolink_fromgg,2],
xend = df[nolink_togg,1], yend = df[nolink_togg,2], colour="outlink"),
data = df, size=1.4)+ #linetype="dotted", size=1.4)+
# link interessante:
geom_segment(aes(x = df[intlink_from,1], y = df[intlink_from,2],
xend = df[intlink_to,1], yend = df[intlink_to,2], colour="intlink"),
data = df, size=1.4)+# linetype="dotted", size=1.4)+
# formatacao:
theme_bw()+
theme(panel.border = element_blank())+ # para ficar igual o plotly
guides(color=guide_legend(title=NULL), shape=guide_legend(title=NULL))+
scale_shape_manual(values=c(1, 16))+
# scale_color_manual(values=c("black", "black", "orange", "red", "blue", "green", "purple"))
# scale_color_manual(values=c("black", "black", "grey", plotly_palette[4], plotly_palette[1],
#                             plotly_palette[3], plotly_palette[2]))
# scale_color_manual(values=c(plotly_palette[5], plotly_palette[10], "grey", plotly_palette[4], plotly_palette[1],
#                           plotly_palette[3], plotly_palette[2]))
scale_color_manual(values=c(plotly_palette[1], plotly_palette[2], plotly_palette[10], plotly_palette[4], plotly_palette[5],
plotly_palette[3], plotly_palette[7]))
b
bp <- plotly::style(plotly::ggplotly(b),visible="legendonly", traces = c(3,4,5,6,7))
library(htmlwidgets)
library(plotly)
saveWidget(as_widget(bp), file = "/home/allan/Documents/1S2018/TCC2/apres_TCC2/assets/widgets/MST_intlink_plotly.html")
library(slidify)
library(slidifyLibraries)
# antes definir o local A PARTIR DO qual será criada a pasta da apresentação com
#... a função author()
library(tcltk)
dir_wd.loc<-tk_choose.dir()
#dir_wd.loc<-choose.ls()
setwd(dir_wd.loc)
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(rvest)
gol <- read_html("http://info.livescore123.in/detail/1510742.html")
gol
form <- gol %>%
html_nodes(xpath='/html/body/table[2]/tbody/tr[1]/td[2]/table/tbody/tr[2]/td[3]') %>%
html_text()
form
gol <- read_html("http://info.livescore123.in/detail/1510742.html")
form <- gol %>%
html() %>%
html_nodes(xpath='/html/body/table[2]/tbody/tr[1]/td[2]/table/tbody/tr[2]/td[3]') %>%
html_text()
form <- gol %>%
html_nodes(xpath='/html/body/table[2]/tbody/tr[1]/td[2]/table/tbody/tr[2]/td[3]') %>%
html_text()
form
form <- gol %>%
html_nodes('<td colspan="2" width="43%">1</td>') %>%
html_text()
tab <- html_table(gol, fill=TRUE)[[1]]
tab
tab <- html_table(gol, fill=TRUE)
tab
View(tab)
gol <- read_html('http://info.livescore123.in/detail/1564312.html')
tab <- html_table(gol, fill=TRUE)
tab
gol <- read_html("http://info.livescore123.in/detail/1510742.html")
tab <- html_table(gol, fill=TRUE)
tab
gol <- read_html('https://www.sofascore.com/pt/futebol/livescore')
gol
tab <- html_table(gol, fill=TRUE)
tab
tab
fnde_presi <- read_html("http://www.fnde.gov.br/acesso-a-informacao/institucional/quem-e-quem/26-presidencia")
tab <- html_table(fnde_presi, fill=TRUE)
tab
tab <- html_table(fnde_presi, fill=TRUE)
tab <- html_nodes(fnde_presi, fill=TRUE)
tab <- html_nodes(fnde_presi)
tab
gol <- read_html("http://info.livescore123.in/detail/1510742.html")
tab <- html_table(gol, fill=TRUE)
tab
gol <- read_html('http://info.livescore123.in/detail/1564312.html')
tab <- html_table(gol, fill=TRUE)
tab
gol <- read_html("http://info.livescore123.in/detail/1510742.html")
tab <- html_table(gol, fill=TRUE)
tab
gol <- read_html('http://info.livescore123.in/detail/1564312.html')
tab <- html_table(gol, fill=TRUE)
tab
