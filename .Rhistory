# confusion_matrix <- as.data.frame(table(predicted_class, actual_class))
library(ggplot2)
plotly_pallette <- c('#1F77B4', '#FF7F0E', '#2CA02C', '#D62728')
ggplot(data = confusion_matrix,
mapping = aes(x = Var2,
y = Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")
confusion_matrix
readRDS("./dados/confusion_matrix.rds")
# confusion_matrix <- as.data.frame(table(predicted_class, actual_class))
library(ggplot2)
plotly_pallette <- c('#1F77B4', '#FF7F0E', '#2CA02C', '#D62728')
ggplot(data = confusion_matrix,
mapping = aes(x = Var2,
y = Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", "original")
# confusion_matrix <- as.data.frame(table(predicted_class, actual_class))
library(ggplot2)
plotly_pallette <- c('#1F77B4', '#FF7F0E', '#2CA02C', '#D62728')
ggplot(data = confusion_matrix,
mapping = aes(x = Var2,
y = Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", y = "original")
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(htmlwidgets)
library(plotly)
saveWidget(as_widget(p), file = "/home/allan/Documents/r-projects/apres_NMQ1/assets/widgets/ggplotly_confusion_matrix.html")
p <- ggplot(data = confusion_matrix,
mapping = aes(x = Var2,
y = Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", y = "original")
p
p <- ggplotly(p)
ggplotly(p)
saveWidget(as_widget(ggplotly(p)), file = "/home/allan/Documents/r-projects/apres_NMQ1/assets/widgets/ggplotly_confusion_matrix.html")
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
```{r, echo=FALSE, warning=FALSE, cache=FALSE, results='asis'}
cat('<iframe src="./assets/widgets/ggplotly_confusion_matrix.html" width="50%" height="50%" scrolling="no" seamless="seamless" frameBorder="1"> </iframe>')
```
```{r, echo=FALSE, warning=FALSE, cache=FALSE, results='asis'}
cat('<iframe src="./assets/widgets/ggplotly_confusion_matrix.html" width="50%" height="50%" scrolling="no" seamless="seamless" frameBorder="0"> </iframe>')
```
p <- plot_ly(df_orc, x = ~ano, y = ~MJ, type = 'bar', marker=list(opacity=0.6), name = 'Justiça') %>%
add_trace(y = ~MCTIC, marker=list(opacity=0.6), name = 'MCTIC') %>%
add_trace(y = ~MAPA, marker=list(opacity=0.6), name = 'MAPA') %>%
add_trace(y = ~FNDE, marker=list(opacity=0.6), name = 'FNDE', visible="legendonly") %>%
layout(yaxis = list(title = "$ (em bilhões)"))
p
p <- ggplot(data = confusion_matrix,
mapping = aes(x = Var2,
y = Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", y = "original")
p
p <- ggplotly(p)
library(htmlwidgets)
p
saveWidget(as_widget(ggplotly(p)), file = "/home/allan/Documents/r-projects/apres_NMQ1/assets/widgets/ggplotly_confusion_matrix.html")
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
p
p <- ggplot(data = confusion_matrix,
mapping = aes(x = Var2,
y = Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", y = "original")
saveRDS(p, "./dados/confusion_matrix_plot.rds")
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
summary(modLog)
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
nrow(test)
sum(confusion_matrix)
confusion_matrix
readRDS("./dados/confusion_matrix.rds")
```{r, echo=FALSE, warning=FALSE, cache=FALSE, fig.width = 6, fig.height = 6}
confusion_matrix <- readRDS("./dados/confusion_matrix.rds")
print(paste0("accuracy: ", (confusion_matrix[1,1] + confusion_matrix[2,2])/nrow(test)))
print(p)
```
```{r, echo=FALSE, warning=FALSE, cache=FALSE, fig.width = 6, fig.height = 6}
confusion_matrix <- readRDS("./dados/confusion_matrix.rds")
print(paste0("accuracy: ", (confusion_matrix[1,1] + confusion_matrix[2,2])/nrow(test)))
print(p)
```
sum(confusion_matrix)
print(paste0("accuracy: ", (confusion_matrix[1,1] + confusion_matrix[2,2])/sum(confusion_matrix)))
print(paste0("accuracy: ", round(confusion_matrix[1,1] + confusion_matrix[2,2])/sum(confusion_matrix),2)))
print(paste0("accuracy: ", round((confusion_matrix[1,1] + confusion_matrix[2,2])/sum(confusion_matrix),2)))
print(paste0("accuracy: ", round((confusion_matrix[1,1] + confusion_matrix[2,2])/sum(confusion_matrix),3)))
print(paste0("accuracy: ", round((confusion_matrix[1,1] + confusion_matrix[2,2])/sum(confusion_matrix), 2)))
confusion_matrix
confusion_matrix[2,]
sum(confusion_matrix[2,])
print(paste0("accuracy: ", round((confusion_matrix[1,1] + confusion_matrix[2,2])/sum(confusion_matrix), 2)))
print(paste0("specif: ", round((confusion_matrix[2,2])/sum(confusion_matrix[2,]), 2)))
sensitivity = testTable[2,2]/sum(testTable[2,]) # linha eh a referencia
specificity = testTable[1,1]/sum(testTable[1,]) # soh com amortizacao fica bom
print(p)
```
confusion_matrix[2,2])/sum(confusion_matrix[2,])
confusion_matrix[2,2]/sum(confusion_matrix[2,])
round(confusion_matrix[2,2]/sum(confusion_matrix[2,]), 2)
print(paste0("accuracy: ", round((confusion_matrix[1,1] + confusion_matrix[2,2])/sum(confusion_matrix), 2)))
print(paste0("specif: ", round(confusion_matrix[2,2]/sum(confusion_matrix[2,]), 2) ))
print(paste0("accuracy: ", round((confusion_matrix[1,1] + confusion_matrix[2,2])/sum(confusion_matrix), 2)))
print(paste0("sensitivity: ", round(confusion_matrix[2,2]/sum(confusion_matrix[2,]), 2) ))
print(paste0("specificity: ", round(confusion_matrix[1,1]/sum(confusion_matrix[1,]), 2) ))
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
slidify("index.Rmd")
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
