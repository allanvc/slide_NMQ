# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
slidify("index.Rmd")
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
confusion_matrix <- as.data.frame(readRDS("./dados/confusion_matrix.rds"))
confusion_matrix <- as.data.frame(table(predicted_class, actual_class))
confusion_matrix <- as.data.frame(readRDS("./dados/confusion_matrix.rds"))
# confusion_matrix <- as.data.frame(table(predicted_class, actual_class))
library(ggplot2)
plotly_pallette <- c('#1F77B4', '#FF7F0E', '#2CA02C', '#D62728')
p <- ggplot(data = confusion_matrix,
mapping = aes(x = Var2,
y = Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
scale_y_continuous(trans = "reverse", breaks = unique(Var1))+
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", y = "original")
p <- ggplot(data = confusion_matrix,
mapping = aes(x = Var2,
y = Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
scale_y_continuous(trans = "reverse", breaks = unique(confusion_matrix$Var1))+
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", y = "original")
p
p <- ggplot(data = confusion_matrix,
mapping = aes(x = Var2,
y = Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
scale_y_discrete(trans = "reverse", breaks = unique(confusion_matrix$Var1))+
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", y = "original")
p <- ggplot(data = confusion_matrix,
mapping = aes(x = Var2,
y = Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
scale_x_discrete(limits = rev(levels(theFactor)))+
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", y = "original")
confusion_matrix
p <- ggplot(data = confusion_matrix,
mapping = aes(x = Var2,
y = Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
scale_x_discrete(limits = rev(Var1))+
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", y = "original")
p <- ggplot(data = confusion_matrix,
mapping = aes(x = Var2,
y = Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
scale_x_discrete(limits = rev(confusion_matrix$Var1))+
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", y = "original")
p
p <- ggplot(data = confusion_matrix,
mapping = aes(x = Var2,
y = Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
scale_x_discrete(limits = rev(confusion_matrix$Var2))+
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", y = "original")
p
p <- ggplot(data = confusion_matrix,
mapping = aes(x = Var2,
y = Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
# scale_x_discrete(limits = rev(confusion_matrix$Var2))+
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", y = "original")
p
p <- ggplot(data = confusion_matrix,
mapping = aes(x = Var2,
y = reorder(Var1, desc(Var1)))) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
# scale_x_discrete(limits = rev(confusion_matrix$Var2))+
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", y = "original")
p
library(dplyr)
p <- ggplot(data = confusion_matrix,
mapping = aes(x = Var2,
y = reorder(Var1, desc(Var1)))) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
# scale_x_discrete(limits = rev(confusion_matrix$Var2))+
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", y = "original")
p
p <- ggplot(data = confusion_matrix,
mapping = aes(x = Var2,
y = Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
# scale_x_discrete(limits = rev(confusion_matrix$Var2))+
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", y = "original")
p
p <- ggplot(data = confusion_matrix,
mapping = aes(x = reorder(Var2, desc(Var2)),
y = reorder(Var1, desc(Var1)))) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
# scale_x_discrete(limits = rev(confusion_matrix$Var2))+
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", y = "original")
p
p <- ggplot(data = confusion_matrix,
mapping = aes(x = reorder(Var2, desc(Var2)),
y = reorder(Var1, desc(Var1)))) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
# scale_x_discrete(limits = rev(confusion_matrix$Var2))+
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", y = "original")
p
p <- ggplot(data = confusion_matrix,
mapping = aes(x = reorder(Var2, desc(Var2)),
y = Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
# scale_x_discrete(limits = rev(confusion_matrix$Var2))+
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", y = "original")
p
p <- ggplot(data = confusion_matrix,
mapping = aes(x = Var2,
y = reorder(Var1, desc(Var1)))) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = '#2CA02C',
high = '#FF7F0E',
trans = "log")+ # if your results aren't quite as clear as the above exampl
# scale_x_discrete(limits = rev(confusion_matrix$Var2))+
theme_bw()+
# theme(panel.border = element_blank())+ # para ficar igual o plotly
theme(legend.position = "none")+
labs(x = "predicted", y = "original")
p
p
saveRDS(p, "./dados/confusion_matrix_plot.rds")
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
slidify("index.Rmd")
# +
runDeck()
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
```{r, echo=FALSE, warning=FALSE, cache=FALSE, fig.width = 4.7, fig.height = 4.7, fig.align = 'center'}
library(dplyr)
p <- readRDS("./dados/confusion_matrix_plot.rds")
print(p)
```
```{r, echo=FALSE, warning=FALSE, cache=FALSE, fig.width = 4.7, fig.height = 4.7, fig.align = 'center'}
library(dplyr)
p <- readRDS("./dados/confusion_matrix_plot.rds")
print(p)
```
p <- readRDS("./dados/confusion_matrix_plot.rds")
p
print(p)
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
# p/ rodar:
# OBS: lembrando que se o WD não estiver "settado" para a pasta do projeto,...
#... o slidify não encontrará o projeto para rodar
# salvar antes o index.Rmd com as alterações feitas e depois..
# preferível
slidify("index.Rmd")
# +
runDeck()
